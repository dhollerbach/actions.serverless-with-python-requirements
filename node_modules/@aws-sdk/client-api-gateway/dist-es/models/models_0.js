import { APIGatewayServiceException as __BaseException } from "./APIGatewayServiceException";
export const AccessAssociationSourceType = {
    VPCE: "VPCE",
};
export const ApiKeysFormat = {
    csv: "csv",
};
export const ApiKeySourceType = {
    AUTHORIZER: "AUTHORIZER",
    HEADER: "HEADER",
};
export const AuthorizerType = {
    COGNITO_USER_POOLS: "COGNITO_USER_POOLS",
    REQUEST: "REQUEST",
    TOKEN: "TOKEN",
};
export class BadRequestException extends __BaseException {
    name = "BadRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    name = "LimitExceededException";
    $fault = "client";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class NotFoundException extends __BaseException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export class TooManyRequestsException extends __BaseException {
    name = "TooManyRequestsException";
    $fault = "client";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class UnauthorizedException extends __BaseException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
export const CacheClusterSize = {
    SIZE_0_POINT_5_GB: "0.5",
    SIZE_118_GB: "118",
    SIZE_13_POINT_5_GB: "13.5",
    SIZE_1_POINT_6_GB: "1.6",
    SIZE_237_GB: "237",
    SIZE_28_POINT_4_GB: "28.4",
    SIZE_58_POINT_2_GB: "58.2",
    SIZE_6_POINT_1_GB: "6.1",
};
export class ServiceUnavailableException extends __BaseException {
    name = "ServiceUnavailableException";
    $fault = "server";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export const DocumentationPartType = {
    API: "API",
    AUTHORIZER: "AUTHORIZER",
    METHOD: "METHOD",
    MODEL: "MODEL",
    PATH_PARAMETER: "PATH_PARAMETER",
    QUERY_PARAMETER: "QUERY_PARAMETER",
    REQUEST_BODY: "REQUEST_BODY",
    REQUEST_HEADER: "REQUEST_HEADER",
    RESOURCE: "RESOURCE",
    RESPONSE: "RESPONSE",
    RESPONSE_BODY: "RESPONSE_BODY",
    RESPONSE_HEADER: "RESPONSE_HEADER",
};
export const EndpointType = {
    EDGE: "EDGE",
    PRIVATE: "PRIVATE",
    REGIONAL: "REGIONAL",
};
export const SecurityPolicy = {
    TLS_1_0: "TLS_1_0",
    TLS_1_2: "TLS_1_2",
};
export const DomainNameStatus = {
    AVAILABLE: "AVAILABLE",
    PENDING: "PENDING",
    PENDING_CERTIFICATE_REIMPORT: "PENDING_CERTIFICATE_REIMPORT",
    PENDING_OWNERSHIP_VERIFICATION: "PENDING_OWNERSHIP_VERIFICATION",
    UPDATING: "UPDATING",
};
export const ConnectionType = {
    INTERNET: "INTERNET",
    VPC_LINK: "VPC_LINK",
};
export const ContentHandlingStrategy = {
    CONVERT_TO_BINARY: "CONVERT_TO_BINARY",
    CONVERT_TO_TEXT: "CONVERT_TO_TEXT",
};
export const IntegrationType = {
    AWS: "AWS",
    AWS_PROXY: "AWS_PROXY",
    HTTP: "HTTP",
    HTTP_PROXY: "HTTP_PROXY",
    MOCK: "MOCK",
};
export const CacheClusterStatus = {
    AVAILABLE: "AVAILABLE",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    FLUSH_IN_PROGRESS: "FLUSH_IN_PROGRESS",
    NOT_AVAILABLE: "NOT_AVAILABLE",
};
export const UnauthorizedCacheControlHeaderStrategy = {
    FAIL_WITH_403: "FAIL_WITH_403",
    SUCCEED_WITHOUT_RESPONSE_HEADER: "SUCCEED_WITHOUT_RESPONSE_HEADER",
    SUCCEED_WITH_RESPONSE_HEADER: "SUCCEED_WITH_RESPONSE_HEADER",
};
export const QuotaPeriodType = {
    DAY: "DAY",
    MONTH: "MONTH",
    WEEK: "WEEK",
};
export const VpcLinkStatus = {
    AVAILABLE: "AVAILABLE",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
export const GatewayResponseType = {
    ACCESS_DENIED: "ACCESS_DENIED",
    API_CONFIGURATION_ERROR: "API_CONFIGURATION_ERROR",
    AUTHORIZER_CONFIGURATION_ERROR: "AUTHORIZER_CONFIGURATION_ERROR",
    AUTHORIZER_FAILURE: "AUTHORIZER_FAILURE",
    BAD_REQUEST_BODY: "BAD_REQUEST_BODY",
    BAD_REQUEST_PARAMETERS: "BAD_REQUEST_PARAMETERS",
    DEFAULT_4XX: "DEFAULT_4XX",
    DEFAULT_5XX: "DEFAULT_5XX",
    EXPIRED_TOKEN: "EXPIRED_TOKEN",
    INTEGRATION_FAILURE: "INTEGRATION_FAILURE",
    INTEGRATION_TIMEOUT: "INTEGRATION_TIMEOUT",
    INVALID_API_KEY: "INVALID_API_KEY",
    INVALID_SIGNATURE: "INVALID_SIGNATURE",
    MISSING_AUTHENTICATION_TOKEN: "MISSING_AUTHENTICATION_TOKEN",
    QUOTA_EXCEEDED: "QUOTA_EXCEEDED",
    REQUEST_TOO_LARGE: "REQUEST_TOO_LARGE",
    RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND",
    THROTTLED: "THROTTLED",
    UNAUTHORIZED: "UNAUTHORIZED",
    UNSUPPORTED_MEDIA_TYPE: "UNSUPPORTED_MEDIA_TYPE",
    WAF_FILTERED: "WAF_FILTERED",
};
export const LocationStatusType = {
    DOCUMENTED: "DOCUMENTED",
    UNDOCUMENTED: "UNDOCUMENTED",
};
export const ResourceOwner = {
    OTHER_ACCOUNTS: "OTHER_ACCOUNTS",
    SELF: "SELF",
};
export const PutMode = {
    Merge: "merge",
    Overwrite: "overwrite",
};
export const Op = {
    add: "add",
    copy: "copy",
    move: "move",
    remove: "remove",
    replace: "replace",
    test: "test",
};
