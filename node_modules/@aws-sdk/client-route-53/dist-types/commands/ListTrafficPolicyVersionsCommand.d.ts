import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { ListTrafficPolicyVersionsRequest, ListTrafficPolicyVersionsResponse } from "../models/models_0";
import { Route53ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../Route53Client";
/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link ListTrafficPolicyVersionsCommand}.
 */
export interface ListTrafficPolicyVersionsCommandInput extends ListTrafficPolicyVersionsRequest {
}
/**
 * @public
 *
 * The output of {@link ListTrafficPolicyVersionsCommand}.
 */
export interface ListTrafficPolicyVersionsCommandOutput extends ListTrafficPolicyVersionsResponse, __MetadataBearer {
}
declare const ListTrafficPolicyVersionsCommand_base: {
    new (input: ListTrafficPolicyVersionsCommandInput): import("@smithy/smithy-client").CommandImpl<ListTrafficPolicyVersionsCommandInput, ListTrafficPolicyVersionsCommandOutput, Route53ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: ListTrafficPolicyVersionsCommandInput): import("@smithy/smithy-client").CommandImpl<ListTrafficPolicyVersionsCommandInput, ListTrafficPolicyVersionsCommandOutput, Route53ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Gets information about all of the versions for a specified traffic policy.</p>
 *          <p>Traffic policy versions are listed in numerical order by
 * 			<code>VersionNumber</code>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { Route53Client, ListTrafficPolicyVersionsCommand } from "@aws-sdk/client-route-53"; // ES Modules import
 * // const { Route53Client, ListTrafficPolicyVersionsCommand } = require("@aws-sdk/client-route-53"); // CommonJS import
 * const client = new Route53Client(config);
 * const input = { // ListTrafficPolicyVersionsRequest
 *   Id: "STRING_VALUE", // required
 *   TrafficPolicyVersionMarker: "STRING_VALUE",
 *   MaxItems: Number("int"),
 * };
 * const command = new ListTrafficPolicyVersionsCommand(input);
 * const response = await client.send(command);
 * // { // ListTrafficPolicyVersionsResponse
 * //   TrafficPolicies: [ // TrafficPolicies // required
 * //     { // TrafficPolicy
 * //       Id: "STRING_VALUE", // required
 * //       Version: Number("int"), // required
 * //       Name: "STRING_VALUE", // required
 * //       Type: "SOA" || "A" || "TXT" || "NS" || "CNAME" || "MX" || "NAPTR" || "PTR" || "SRV" || "SPF" || "AAAA" || "CAA" || "DS" || "TLSA" || "SSHFP" || "SVCB" || "HTTPS", // required
 * //       Document: "STRING_VALUE", // required
 * //       Comment: "STRING_VALUE",
 * //     },
 * //   ],
 * //   IsTruncated: true || false, // required
 * //   TrafficPolicyVersionMarker: "STRING_VALUE", // required
 * //   MaxItems: Number("int"), // required
 * // };
 *
 * ```
 *
 * @param ListTrafficPolicyVersionsCommandInput - {@link ListTrafficPolicyVersionsCommandInput}
 * @returns {@link ListTrafficPolicyVersionsCommandOutput}
 * @see {@link ListTrafficPolicyVersionsCommandInput} for command's `input` shape.
 * @see {@link ListTrafficPolicyVersionsCommandOutput} for command's `response` shape.
 * @see {@link Route53ClientResolvedConfig | config} for Route53Client's `config` shape.
 *
 * @throws {@link InvalidInput} (client fault)
 *  <p>The input is not valid.</p>
 *
 * @throws {@link NoSuchTrafficPolicy} (client fault)
 *  <p>No traffic policy exists with the specified ID.</p>
 *
 * @throws {@link Route53ServiceException}
 * <p>Base exception class for all service exceptions from Route53 service.</p>
 *
 * @public
 */
export declare class ListTrafficPolicyVersionsCommand extends ListTrafficPolicyVersionsCommand_base {
    /** @internal type navigation helper, not in runtime. */
    protected static __types: {
        api: {
            input: ListTrafficPolicyVersionsRequest;
            output: ListTrafficPolicyVersionsResponse;
        };
        sdk: {
            input: ListTrafficPolicyVersionsCommandInput;
            output: ListTrafficPolicyVersionsCommandOutput;
        };
    };
}
