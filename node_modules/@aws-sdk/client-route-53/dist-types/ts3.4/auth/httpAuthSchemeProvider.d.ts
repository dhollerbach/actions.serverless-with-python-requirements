import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { Route53ClientResolvedConfig } from "../Route53Client";
export interface Route53HttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface Route53HttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    Route53ClientResolvedConfig,
    HandlerExecutionContext,
    Route53HttpAuthSchemeParameters,
    object
  > {}
export declare const defaultRoute53HttpAuthSchemeParametersProvider: (
  config: Route53ClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<Route53HttpAuthSchemeParameters>;
export interface Route53HttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<Route53HttpAuthSchemeParameters> {}
export declare const defaultRoute53HttpAuthSchemeProvider: Route53HttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: Route53HttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: Route53HttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
