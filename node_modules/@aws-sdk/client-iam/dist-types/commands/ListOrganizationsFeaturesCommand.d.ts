import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IAMClient";
import { ListOrganizationsFeaturesRequest, ListOrganizationsFeaturesResponse } from "../models/models_0";
/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link ListOrganizationsFeaturesCommand}.
 */
export interface ListOrganizationsFeaturesCommandInput extends ListOrganizationsFeaturesRequest {
}
/**
 * @public
 *
 * The output of {@link ListOrganizationsFeaturesCommand}.
 */
export interface ListOrganizationsFeaturesCommandOutput extends ListOrganizationsFeaturesResponse, __MetadataBearer {
}
declare const ListOrganizationsFeaturesCommand_base: {
    new (input: ListOrganizationsFeaturesCommandInput): import("@smithy/smithy-client").CommandImpl<ListOrganizationsFeaturesCommandInput, ListOrganizationsFeaturesCommandOutput, IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (...[input]: [] | [ListOrganizationsFeaturesCommandInput]): import("@smithy/smithy-client").CommandImpl<ListOrganizationsFeaturesCommandInput, ListOrganizationsFeaturesCommandOutput, IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Lists the centralized root access features enabled for your organization. For more
 *             information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user-access-management">Centrally manage root access for member accounts</a>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { IAMClient, ListOrganizationsFeaturesCommand } from "@aws-sdk/client-iam"; // ES Modules import
 * // const { IAMClient, ListOrganizationsFeaturesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
 * const client = new IAMClient(config);
 * const input = {};
 * const command = new ListOrganizationsFeaturesCommand(input);
 * const response = await client.send(command);
 * // { // ListOrganizationsFeaturesResponse
 * //   OrganizationId: "STRING_VALUE",
 * //   EnabledFeatures: [ // FeaturesListType
 * //     "RootCredentialsManagement" || "RootSessions",
 * //   ],
 * // };
 *
 * ```
 *
 * @param ListOrganizationsFeaturesCommandInput - {@link ListOrganizationsFeaturesCommandInput}
 * @returns {@link ListOrganizationsFeaturesCommandOutput}
 * @see {@link ListOrganizationsFeaturesCommandInput} for command's `input` shape.
 * @see {@link ListOrganizationsFeaturesCommandOutput} for command's `response` shape.
 * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
 *
 * @throws {@link AccountNotManagementOrDelegatedAdministratorException} (client fault)
 *  <p>The request was rejected because the account making the request is not the management
 *       account or delegated administrator account for <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user-access-management">centralized root
 *         access</a>.</p>
 *
 * @throws {@link OrganizationNotFoundException} (client fault)
 *  <p>The request was rejected because no organization is associated with your account.</p>
 *
 * @throws {@link OrganizationNotInAllFeaturesModeException} (client fault)
 *  <p>The request was rejected because your organization does not have All features enabled. For
 *       more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#feature-set">Available feature sets</a> in the <i>Organizations User
 *           Guide</i>.</p>
 *
 * @throws {@link ServiceAccessNotEnabledException} (client fault)
 *  <p>The request was rejected because trusted access is not enabled for IAM in Organizations. For details, see IAM and Organizations in the <i>Organizations User Guide</i>.</p>
 *
 * @throws {@link IAMServiceException}
 * <p>Base exception class for all service exceptions from IAM service.</p>
 *
 * @public
 * @example To list the centralized root access features enabled for your organization
 * ```javascript
 * // he following command lists the centralized root access features enabled for your organization.
 * const input = {};
 * const command = new ListOrganizationsFeaturesCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "EnabledFeatures": [
 *     "RootCredentialsManagement"
 *   ],
 *   "OrganizationId": "o-aa111bb222"
 * }
 * *\/
 * // example id: to-list-the-centralized-root-access-features-enabled-for-your-organization-1730908832557
 * ```
 *
 */
export declare class ListOrganizationsFeaturesCommand extends ListOrganizationsFeaturesCommand_base {
    /** @internal type navigation helper, not in runtime. */
    protected static __types: {
        api: {
            input: {};
            output: ListOrganizationsFeaturesResponse;
        };
        sdk: {
            input: ListOrganizationsFeaturesCommandInput;
            output: ListOrganizationsFeaturesCommandOutput;
        };
    };
}
