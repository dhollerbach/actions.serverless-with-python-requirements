"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  acceptHeaderMiddleware: () => acceptHeaderMiddleware,
  acceptHeaderMiddlewareOptions: () => acceptHeaderMiddlewareOptions,
  getAcceptHeaderPlugin: () => getAcceptHeaderPlugin
});
module.exports = __toCommonJS(src_exports);
var import_protocol_http = require("@smithy/protocol-http");
function acceptHeaderMiddleware() {
  return (next) => async (args) => {
    const { request } = args;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      if (request.headers?.accept === void 0) {
        request.headers.accept = "application/json";
      }
    }
    return next({
      ...args,
      request
    });
  };
}
__name(acceptHeaderMiddleware, "acceptHeaderMiddleware");
var acceptHeaderMiddlewareOptions = {
  step: "build",
  tags: ["SET_ACCEPT_HEADER", "ACCEPT_HEADER"],
  name: "acceptHeaderMiddleware",
  override: true
};
var getAcceptHeaderPlugin = /* @__PURE__ */ __name((unused) => ({
  applyToStack: (clientStack) => {
    clientStack.add(acceptHeaderMiddleware(), acceptHeaderMiddlewareOptions);
  }
}), "getAcceptHeaderPlugin");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  acceptHeaderMiddleware,
  acceptHeaderMiddlewareOptions,
  getAcceptHeaderPlugin
});

