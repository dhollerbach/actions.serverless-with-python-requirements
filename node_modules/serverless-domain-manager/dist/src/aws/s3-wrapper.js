"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const logging_1 = __importDefault(require("../logging"));
const client_s3_1 = require("@aws-sdk/client-s3");
const globals_1 = __importDefault(require("../globals"));
class S3Wrapper {
    constructor(credentials) {
        this.s3 = new client_s3_1.S3Client({
            credentials,
            region: globals_1.default.getRegion(),
            requestHandler: globals_1.default.getRequestHandler(),
            endpoint: globals_1.default.getServiceEndpoint("s3")
        });
    }
    /**
     * * Checks whether the Mutual TLS certificate exists in S3 or not
     */
    assertTlsCertObjectExists(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            const { Bucket, Key } = S3Wrapper.extractBucketAndKey(domain.tlsTruststoreUri);
            const params = { Bucket, Key };
            if (domain.tlsTruststoreVersion) {
                params.VersionId = domain.tlsTruststoreVersion;
            }
            try {
                yield this.s3.send(new client_s3_1.HeadObjectCommand(params));
            }
            catch (err) {
                if (!err.$metadata || err.$metadata.httpStatusCode !== 403) {
                    throw Error(`Could not head S3 object at ${domain.tlsTruststoreUri}.\n${err.message}`);
                }
                logging_1.default.logWarning(`Forbidden to check the existence of the S3 object ${domain.tlsTruststoreUri} due to\n${err}`);
            }
        });
    }
    /**
     * * Extracts Bucket and Key from the given s3 uri
     */
    static extractBucketAndKey(uri) {
        const { hostname, pathname } = new URL(uri);
        return { Bucket: hostname, Key: pathname.substring(1) };
    }
}
module.exports = S3Wrapper;
