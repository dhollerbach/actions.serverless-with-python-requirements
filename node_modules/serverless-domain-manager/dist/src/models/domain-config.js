"use strict";
/**
 * Wrapper class for Custom Domain information
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const globals_1 = __importDefault(require("../globals"));
const utils_1 = require("../utils");
const logging_1 = __importDefault(require("../logging"));
class DomainConfig {
    constructor(config) {
        this.enabled = (0, utils_1.evaluateBoolean)(config.enabled, true);
        this.givenDomainName = config.domainName;
        this.certificateArn = config.certificateArn;
        this.certificateName = config.certificateName;
        this.createRoute53Record = (0, utils_1.evaluateBoolean)(config.createRoute53Record, true);
        this.createRoute53IPv6Record = (0, utils_1.evaluateBoolean)(config.createRoute53IPv6Record, true);
        this.route53Profile = config.route53Profile;
        this.route53Region = config.route53Region;
        this.hostedZoneId = config.hostedZoneId;
        this.hostedZonePrivate = config.hostedZonePrivate;
        this.allowPathMatching = config.allowPathMatching;
        this.autoDomain = (0, utils_1.evaluateBoolean)(config.autoDomain, false);
        this.autoDomainWaitFor = config.autoDomainWaitFor;
        this.preserveExternalPathMappings = (0, utils_1.evaluateBoolean)(config.preserveExternalPathMappings, false);
        this.basePath = DomainConfig._getBasePath(config.basePath);
        this.apiType = DomainConfig._getApiType(config.apiType);
        // apiType and basePath should be defined before stage
        this.stage = DomainConfig._getStage(config.stage, this.apiType, this.basePath);
        this.endpointType = DomainConfig._getEndpointType(config.endpointType);
        this.tlsTruststoreUri = DomainConfig._getTLSTruststoreUri(config.tlsTruststoreUri, this.endpointType);
        this.tlsTruststoreVersion = config.tlsTruststoreVersion;
        this.securityPolicy = DomainConfig._getSecurityPolicy(config.securityPolicy);
        this.route53Params = DomainConfig._getRoute53Params(config.route53Params, this.endpointType);
        this.splitHorizonDns = !this.hostedZoneId && !this.hostedZonePrivate && (0, utils_1.evaluateBoolean)(config.splitHorizonDns, false);
    }
    static _getStage(stage, apiType, basePath) {
        if (apiType === globals_1.default.apiTypes.http && (basePath === globals_1.default.defaultBasePath || !stage)) {
            return globals_1.default.defaultStage;
        }
        return stage || globals_1.default.getBaseStage();
    }
    static _getBasePath(basePath) {
        if (!basePath || basePath.trim() === "") {
            basePath = globals_1.default.defaultBasePath;
        }
        if (globals_1.default.reservedBasePaths.indexOf(basePath) !== -1) {
            logging_1.default.logWarning("The `/ping` and `/sping` paths are reserved for the service health check.\n Please take a look at" +
                "https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-known-issues.html");
        }
        return basePath;
    }
    static _getEndpointType(endpointType) {
        const endpointTypeWithDefault = endpointType || globals_1.default.endpointTypes.edge;
        const endpointTypeToUse = globals_1.default.endpointTypes[endpointTypeWithDefault.toLowerCase()];
        if (!endpointTypeToUse) {
            throw new Error(`${endpointTypeWithDefault} is not supported endpointType, use EDGE or REGIONAL.`);
        }
        return endpointTypeToUse;
    }
    static _getApiType(apiType) {
        const apiTypeWithDefault = apiType || globals_1.default.apiTypes.rest;
        const apiTypeToUse = globals_1.default.apiTypes[apiTypeWithDefault.toLowerCase()];
        if (!apiTypeToUse) {
            throw new Error(`${apiTypeWithDefault} is not supported api type, use REST, HTTP or WEBSOCKET.`);
        }
        return apiTypeToUse;
    }
    static _getTLSTruststoreUri(tlsTruststoreUri, endpointType) {
        if (tlsTruststoreUri) {
            if (endpointType === globals_1.default.endpointTypes.edge) {
                throw new Error(endpointType + " APIs do not support mutual TLS, " +
                    "remove tlsTruststoreUri or change to a regional API.");
            }
            const { protocol, pathname } = new URL(tlsTruststoreUri);
            if (protocol !== "s3:" && !pathname.substring(1).includes("/")) {
                throw new Error(`${tlsTruststoreUri} is not a valid s3 uri, try something like s3://bucket-name/key-name.`);
            }
        }
        return tlsTruststoreUri;
    }
    static _getSecurityPolicy(securityPolicy) {
        const securityPolicyDefault = securityPolicy || globals_1.default.tlsVersions.tls_1_2;
        const tlsVersionToUse = globals_1.default.tlsVersions[securityPolicyDefault.toLowerCase()];
        if (!tlsVersionToUse) {
            throw new Error(`${securityPolicyDefault} is not a supported securityPolicy, use tls_1_0 or tls_1_2.`);
        }
        return tlsVersionToUse;
    }
    static _getRoute53Params(route53Params, endpointType) {
        var _a, _b, _c;
        const routingPolicy = (_b = (_a = route53Params === null || route53Params === void 0 ? void 0 : route53Params.routingPolicy) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : globals_1.default.routingPolicies.simple;
        const routingPolicyToUse = globals_1.default.routingPolicies[routingPolicy];
        if (!routingPolicyToUse) {
            throw new Error(`${routingPolicy} is not a supported routing policy, use simple, latency, or weighted.`);
        }
        if (routingPolicyToUse !== globals_1.default.routingPolicies.simple && endpointType === globals_1.default.endpointTypes.edge) {
            throw new Error(`${routingPolicy} routing is not intended to be used with edge endpoints. ` +
                "Use a regional endpoint instead.");
        }
        return {
            routingPolicy: routingPolicyToUse,
            setIdentifier: route53Params === null || route53Params === void 0 ? void 0 : route53Params.setIdentifier,
            weight: (_c = route53Params === null || route53Params === void 0 ? void 0 : route53Params.weight) !== null && _c !== void 0 ? _c : 200,
            healthCheckId: route53Params === null || route53Params === void 0 ? void 0 : route53Params.healthCheckId
        };
    }
}
module.exports = DomainConfig;
